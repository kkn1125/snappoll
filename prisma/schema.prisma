generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator prismaCustomClassGenerator {
  provider = "ts-node ./prisma/custom-generator.ts"
  output   = "../src/_gen"
}

enum NoticeType {
  Normal
  Batch
}

enum Role {
  User
  Admin
}

enum Group {
  Normal
  Test
}

enum AuthProvider {
  Local
  Kakao
  Google
}

model AllowTerms {
  id        String   @id @default(uuid()) @db.Uuid
  termsId   String   @map("terms_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  terms Terms @relation(fields: [termsId], references: [id], onDelete: Cascade)

  @@map("allow_terms")
}

model Terms {
  id        String   @id @default(uuid()) @db.Uuid
  version   String   @unique @db.VarChar(20)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  termsSection TermsSection[]
  allowTerms   AllowTerms[]

  @@map("terms")
}

model TermsSection {
  id        String   @id @default(uuid()) @db.Uuid
  termsId   String   @map("terms_id") @db.Uuid
  title     String   @db.VarChar(100)
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  terms Terms @relation(fields: [termsId], references: [id], onDelete: Cascade)

  @@map("terms_section")
}

model ErrorMessage {
  id         Int    @id @default(autoincrement())
  codeDomain String @map("code_domain") @db.VarChar(100)
  status     Int
  message    String @db.VarChar(250)

  code Code @relation(fields: [codeDomain], references: [domain], onDelete: Cascade)

  @@map("error_message")
}

model Code {
  id     Int    @id @default(autoincrement())
  status Int    @unique
  domain String @unique @db.VarChar(100) // 코드 영역 예) Auth, API, User, DB, Board...

  errorMessage ErrorMessage[]

  @@map("code")
}

model Webhook {
  id         Int       @id @default(autoincrement())
  domain     String    @map("domain") @db.VarChar(100)
  type       String    @map("type") @db.VarChar(100)
  webhookUrl String    @map("webhook_url") @db.VarChar(300)
  active     Boolean   @default(true) @map("active")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@index([webhookUrl])
  @@map("webhook")
}

model Payment {
  id                        Int       @id @default(autoincrement())
  userId                    String    @map("user_id") @db.Uuid
  subscriptionId            String    @map("subscription_id") @db.Uuid
  mId                       String    @map("m_id")
  paymentKey                String    @map("payment_key")
  orderId                   String    @map("order_id")
  orderName                 String    @map("order_name")
  customerKey               String    @map("customer_key")
  amount                    Int
  taxFreeAmount             Int       @map("tax_free_amount")
  taxExemptionAmount        Int       @map("tax_exemption_amount")
  lastTransactionKey        String    @map("last_transaction_key")
  status                    String
  useEscrow                 Boolean   @map("use_escrow")
  cultureExpense            Boolean   @map("culture_expense")
  cardIssuerCode            String    @map("card_issuer_code")
  cardAcquirerCode          String    @map("card_acquirer_code")
  cardNumber                String    @map("card_number")
  cardInstallmentPlanMonths Int       @map("card_installment_plan_months")
  cardIsInterestFree        Boolean   @map("card_is_interest_free")
  cardInterestPayer         String?   @map("card_interest_payer")
  cardApproveNo             String    @map("card_approve_no")
  useCardPoint              Boolean   @map("use_card_point")
  cardType                  String    @map("card_type")
  cardOwnerType             String    @map("card_owner_type")
  cardAcquireStatus         String    @map("card_acquire_status")
  cardAmount                Int       @map("card_amount")
  secret                    String
  type                      String
  country                   String
  isPartialCancelable       Boolean   @map("is_partial_cancelable")
  receiptUrl                String?   @map("receipt_url")
  checkoutUrl               String?   @map("checkout_url")
  currency                  String
  totalAmount               Int       @map("total_amount")
  balanceAmount             Int       @map("balance_amount")
  suppliedAmount            Int       @map("supplied_amount")
  vat                       Int
  method                    String
  version                   String
  createdAt                 DateTime  @default(now()) @map("created_at")
  updatedAt                 DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt                 DateTime? @map("deleted_at")

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment")
}

model UserProfile {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @map("user_id") @db.Uuid
  filename  String   @db.VarChar(200)
  image     Bytes    @db.ByteA
  mimetype  String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profile")
}

model SocialUser {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @unique @map("user_id") @db.Uuid
  provider  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("social_user")
}

model LocalUser {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @unique @map("user_id") @db.Uuid
  password   String   @db.VarChar(200)
  signupDate DateTime @default(now()) @map("signup_date")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("local_user")
}

enum State {
  Active
  Cancelled
  Expired
}

enum SubscribeType {
  Monthly
  Yearly
  Infinite
}

enum PlanType {
  Free
  Basic
  Pro
  Premium
}

model Subscription {
  id        String        @id @default(uuid()) @db.Uuid
  userId    String        @unique @map("user_id") @db.Uuid
  planId    String        @map("plan_id") @db.Uuid
  type      SubscribeType
  state     State         @default(Active)
  startDate DateTime      @default(now()) @map("start_date")
  endDate   DateTime?     @map("end_date")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  payment Payment[]

  @@index([userId])
  @@index([planId])
  @@map("subscription")
}

model Plan {
  id          String   @id @default(uuid()) @db.Uuid
  planType    PlanType @unique @default(Free) @map("plan_type")
  name        String   @db.VarChar(50)
  description String?
  price       Int      @db.Integer
  discount    Int      @default(0) // 연 결제 할인율
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  subscription Subscription[]
  feature      Feature[]

  @@map("plan")
}

model Feature {
  id        String   @id @default(uuid()) @db.Uuid
  planId    String   @map("plan_id") @db.Uuid
  feature   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("feature")
}

model User {
  id           String       @id @default(uuid()) @db.Uuid
  email        String       @unique
  username     String       @unique
  isActive     Boolean      @default(true) @map("is_active")
  lastLogin    DateTime?    @map("last_login")
  authProvider AuthProvider @default(Local) @map("auth_provider")
  group        Group        @default(Normal)
  role         Role         @default(User)
  receiveMail  Boolean      @default(false) @map("receive_mail")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at")
  deletedAt    DateTime?    @map("deleted_at")

  sendMessage    Message[] @relation("sendMessage")
  receiveMessage Message[] @relation("receiveMessage")

  userProfile UserProfile?
  localUser   LocalUser?
  socialUser  SocialUser?
  // grade       Grade?

  poll         Poll[]
  vote         Vote[]
  response     Response[]
  voteResponse VoteResponse[]
  board        Board[]
  subscription Subscription?
  allowTerms   AllowTerms[]
  comment      Comment[]
  boardLike    BoardLike[]
  payment      Payment[]

  @@index([username])
  @@index([email])
  @@map("user")
}

model SharePoll {
  id        String    @id @default(uuid()) @db.Uuid
  pollId    String    @unique @map("poll_id") @db.Uuid
  url       String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  poll Poll @relation(fields: [pollId], references: [id])

  @@map("share_poll")
}

model ShareVote {
  id        String    @id @default(uuid()) @db.Uuid
  voteId    String    @unique @map("vote_id") @db.Uuid
  url       String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  vote Vote @relation(fields: [voteId], references: [id])

  @@map("share_vote")
}

model Poll {
  id          String    @id @default(uuid()) @db.Uuid
  title       String    @db.VarChar(30)
  description String?
  userId      String    @map("user_id") @db.Uuid
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  question  Question[]
  response  Response[]
  sharePoll SharePoll?

  @@map("poll")
}

model Question {
  id          String   @id @default(uuid()) @db.Uuid
  pollId      String   @map("poll_id") @db.Uuid
  type        String   @default("input") @db.VarChar(20)
  title       String   @db.VarChar(30)
  description String?
  order       Int?
  isRequired  Boolean  @default(false) @map("is_required")
  isMultiple  Boolean  @default(false) @map("is_multiple")
  useEtc      Boolean  @default(false) @map("use_etc")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  answer Answer[]
  option Option[]

  @@map("question")
}

model Response {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  pollId    String   @map("poll_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user User? @relation(fields: [userId], references: [id])
  poll Poll  @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  answer Answer[]

  @@map("response")
}

model Answer {
  id         String   @id @default(uuid()) @db.Uuid
  responseId String?  @map("response_id") @db.Uuid
  questionId String   @map("question_id") @db.Uuid
  optionId   String?  @map("option_id") @db.Uuid
  // select, multiple checkbox
  value      String?  @db.VarChar(100)
  // text input only
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  response Response? @relation(fields: [responseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  question Question  @relation(fields: [questionId], references: [id])
  option   Option?   @relation(fields: [optionId], references: [id])

  @@map("answer")
}

model Option {
  id         String @id @default(uuid()) @db.Uuid
  questionId String @map("question_id") @db.Uuid
  content    String @db.VarChar(150)
  order      Int?

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  answer   Answer[]

  @@index([order])
  @@map("option")
}

model Vote {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  title       String    @db.VarChar(30)
  description String
  isMultiple  Boolean   @map("is_multiple")
  useEtc      Boolean   @default(false) @map("use_etc")
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  voteOption   VoteOption[]
  voteResponse VoteResponse[]
  shareVote    ShareVote?

  @@map("vote")
}

model VoteResponse {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  voteId    String   @map("vote_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user       User?        @relation(fields: [userId], references: [id])
  vote       Vote         @relation(fields: [voteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voteAnswer VoteAnswer[]

  @@map("vote_response")
}

model VoteAnswer {
  id             String   @id @default(uuid()) @db.Uuid
  voteResponseId String?  @map("vote_response_id") @db.Uuid
  voteOptionId   String?  @map("vote_option_id") @db.Uuid
  value          String?  @db.VarChar(100)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  voteResponse VoteResponse? @relation(fields: [voteResponseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voteOption   VoteOption?   @relation(fields: [voteOptionId], references: [id])

  @@map("vote_answer")
}

model VoteOption {
  id        String   @id @default(uuid()) @db.Uuid
  voteId    String   @map("vote_id") @db.Uuid
  content   String   @db.VarChar(100)
  order     Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  vote       Vote         @relation(fields: [voteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voteAnswer VoteAnswer[]

  @@index([order])
  @@map("vote_option")
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  fromId    String   @map("from_id") @db.Uuid
  toId      String   @map("to_id") @db.Uuid
  message   String
  checked   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  sender   User @relation("sendMessage", fields: [fromId], references: [id])
  receiver User @relation("receiveMessage", fields: [toId], references: [id])

  @@map("message")
}

model BoardLike {
  id        String   @id @default(uuid()) @db.Uuid
  boardId   String   @map("board_id") @db.Uuid
  // 게시글 삭제되면 좋아요도 삭제
  userId    String?  @map("user_id") @db.Uuid
  // 유저 탈퇴해도 좋아요는 유지
  createdAt DateTime @default(now()) @map("created_at")

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([userId])
  @@index([boardId])
  @@map("board_like")
}

model Board {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String?   @map("user_id") @db.Uuid
  order      Int?
  category   String    @db.VarChar(50)
  password   String?   @db.VarChar(200)
  title      String    @db.VarChar(100)
  content    String
  viewCount  Int       @default(0) @map("view_count")
  isNotice   Boolean   @default(false) @map("is_notice")
  // likeCount  Int       @default(0) @map("like_count")
  isPrivate  Boolean   @default(false) @map("is_private")
  isOnlyCrew Boolean   @default(false) @map("is_only_crew")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  author    User?       @relation(fields: [userId], references: [id])
  comment   Comment[]
  boardLike BoardLike[]

  @@index([isNotice])
  @@index([category])
  @@map("board")
}

model Comment {
  id           Int       @id @default(autoincrement()) // 댓글 고유 ID
  boardId      String    @map("board_id") @db.Uuid // 댓글이 속한 게시판 ID
  userId       String?   @map("user_id") @db.Uuid // 댓글 작성자 ID (사용자 삭제 시 null로 처리)
  content      String // 댓글 내용
  isAuthorOnly Boolean   @default(false) @map("is_author_only") // 작성자만 볼 수 있는지 여부
  group        Int? // 댓글 그룹 ID (고유 ID 값)
  layer        Int       @default(0) // 댓글 계층 구조 (댓글의 댓글 등)
  order        Int       @default(0) // 댓글 순서
  likeCount    Int       @default(0) @map("like_count") // 댓글 좋아요 수
  createdAt    DateTime  @default(now()) @map("created_at") // 댓글 생성 시간
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") // 댓글 마지막 수정 시간
  deletedAt    DateTime? @map("deleted_at") // 댓글 삭제 시간 (삭제 시에만 값이 저장)

  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([order])
  @@map("comment")
}

model Notice {
  id        String     @id @default(uuid()) @db.Uuid
  type      NoticeType @default(Normal)
  cover     String? // image path
  title     String     @db.VarChar(30)
  content   String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  sendAt    DateTime?  @map("send_at")

  @@map("notice")
}
